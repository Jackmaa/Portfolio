const blogPosts=[{title:"Building nihon-ECF-3: My Manga Library in PHP",date:"2025-03-28",tags:["php","project","backend"],content:`\n  I started this project with one goal: creating a fast, efficient manga library that doesn’t look like it was built in 2009.\n\n  Stack:\n  - 💾 PHP (MVC + Altorouter)\n  - 🖼️ WebP image optimization\n  - 🛠️ JSON API interaction\n\n  Code sample:\n  function borrowManga(user, book) {\n    if (user.limitReached()) throw "Limit exceeded!";\n    user.addBook(book);\n  }\n      `.trim()},{title:"Cyberpunk by Design: Aesthetic Choices in My Portfolio",date:"2025-03-30",tags:["design","ui","cyberpunk"],content:`\n  The goal? Make it feel like the user just jacked into a neural interface.\n\n  🎯 Color Palette\n  - #00f7ff - Neon Cyan\n  - #121212 - Dark background\n  - #ff007a - Optional accent\n\n  🔠 Fonts & Vibes\n  I went with FF-Chambers and Share Tech Mono — both futuristic, geometric, and a little aggressive.\n\n  💡 Pro Tip:\n  Keep contrast high. Neon is pretty, but unreadable if you overdo the glow.\n      `.trim()},{title:"TIL: encodeURIComponent Saved Me",date:"2025-04-01",tags:["javascript","api","devtip"],content:`\n  I was passing user input directly into an API URL and... yeah. Nothing worked. Until I remembered this lil' fella:\n\n  const safeQuery = encodeURIComponent(userInput);\n  fetch(\`/api/search?query=\${safeQuery}\`);\n\n  Don’t be like me. Encode your inputs. Stay safe. Stay glitchy.\n      `.trim()},{title:"My Dev Setup (2025 Edition)",date:"2025-04-02",tags:["productivity","tools","workflow"],content:`\n  🧠 Software\n  - VS Code + GitLens + Peacock\n  - Figma + FigJam\n  - ChatGPT (of course)\n\n  🔧 Terminal Tools\n  - zsh + Oh My Zsh\n  - PNPM over npm/yarn (fight me)\n\n  ✨ Bonus Productivity Boosts\n  - Auto Dark Mode\n  - Clipboard manager\n  - PomoTimer in the menu bar\n\n  It’s not about the tools. But damn, they help.\n      `.trim()}];const blogFeed=document.getElementById("blog-feed");blogPosts.forEach((post=>{const el=document.createElement("div");el.className="log-entry";el.innerHTML=`\n          <div class="log-title">${post.title}</div>\n          <div class="log-meta">[${post.date}] :: <span class="glitch-tag">${post.tags.join(", ")}</span></div>\n          <div class="log-body">${post.content}</div>\n        `;blogFeed.appendChild(el)}));